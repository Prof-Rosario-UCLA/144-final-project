/* eslint-disable no-restricted-globals */
import { clientsClaim } from "workbox-core";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { NetworkFirst, StaleWhileRevalidate } from "workbox-strategies";

clientsClaim();

// Precache all of the assets generated by the build process.
// self.__WB_MANIFEST is replaced at build time with an array of URLs to precache.
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing so that navigations are fulfilled with index.html,
// which allows a single-page React app to handle client-side routing.
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // If this is a navigation request and itâ€™s not for a URL containing a file extension
  ({ request, url }) => {
    if (request.mode !== "navigate") {
      return false;
    }
    // If the URL has a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
);

// Cache API calls (e.g., /api/) using NetworkFirst strategy.
// If offline or the network request fails, respond with a cached copy if available.
registerRoute(
  ({ url }) => url.pathname.startsWith("/api/"),
  new NetworkFirst({
    cacheName: "api-cache",
    networkTimeoutSeconds: 3,
    plugins: []
  })
);

// Cache static assets (JavaScript, CSS, images) using StaleWhileRevalidate strategy.
registerRoute(
  ({ request }) =>
    request.destination === "script" ||
    request.destination === "style" ||
    request.destination === "image",
  new StaleWhileRevalidate({
    cacheName: "static-resources"
  })
);

// This allows the web app to trigger a skipWaiting() from the client,
// so that when we deploy a new version, we can immediately take control.
// For example, your React code could call:
//   navigator.serviceWorker.controller.postMessage({ type: "SKIP_WAITING" });
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});
